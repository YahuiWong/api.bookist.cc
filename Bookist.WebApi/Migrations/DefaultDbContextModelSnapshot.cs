// <auto-generated />
using System;
using Bookist.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bookist.WebApi.Migrations
{
    [DbContext(typeof(DefaultDbContext))]
    partial class DefaultDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Bookist.Core.Entities.Book", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("Author")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Cover")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("CreatedBy");

                    b.Property<int>("Downloads");

                    b.Property<int>("Edition");

                    b.Property<string>("Intro")
                        .HasColumnType("text");

                    b.Property<string>("Isbn")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Pages");

                    b.Property<DateTime>("PublishDate");

                    b.Property<string>("Publisher")
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Reserved1");

                    b.Property<string>("Reserved2")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Score");

                    b.Property<byte>("Status");

                    b.Property<string>("Subtitle")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Toc")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<long>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("Bookist.Core.Entities.BookTag", b =>
                {
                    b.Property<long>("BookId");

                    b.Property<long>("TagId");

                    b.HasKey("BookId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("BookTag");
                });

            modelBuilder.Entity("Bookist.Core.Entities.Link", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long>("BookId");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Format");

                    b.Property<string>("Url")
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Link");
                });

            modelBuilder.Entity("Bookist.Core.Entities.Tag", b =>
                {
                    b.Property<long>("Id");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Bookist.Core.Entities.User", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("Avatar")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("varchar(200)");

                    b.Property<byte>("Role");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Bookist.Core.Entities.BookTag", b =>
                {
                    b.HasOne("Bookist.Core.Entities.Book", "Book")
                        .WithMany("BookTags")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bookist.Core.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bookist.Core.Entities.Link", b =>
                {
                    b.HasOne("Bookist.Core.Entities.Book", "Book")
                        .WithMany("Links")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
